start newline;

chars a [a-zA-Z];
chars d [0-9];
chars s [\t\ ];

state newline default {
	rule	<\n>	{ state = newline; };
	rule	</\*>	{ state=comment_1; color=COMMENT; };
	rule	<//>	{ state=comment_2; color=COMMENT; };
	rule	<$(s)+> ;
	rule	<\">	{ state=string; color=STRING; };
	rule	<\'>	{ state=string2; color=STRING; };
	rule	<\`>	{ state=fstring; color=STRING; };

	
	rule	<0x[0-9a-fA-F]+>	{ state = default; color = NUM; };
	rule	<$(d)+[\.]*$(d)*[eE]*$(d)*>	{ state = default; color = NUM; };
	
	rule <\&\&> { state = default;  color = OPER; };
	rule <\|\|> { state = default;  color = OPER; };

	rule <[,.=\+\-\*\/\%\^\&|]> { state = default;  color = OPER; };
	
	rule <[{}():;]> { state = default;  color = KEYWORD; };

	rule <[{}():;]> { state = default;  color = KEYWORD; };


	rule	<[$(a)$(d)_]+>	{ 
		state = default;  
		words (KEYWORD) = {
			'break', 'case', 'catch', 'class', 'const', 'constructor', 'continue', 'do', 'else', 'export', 'for',
			'from', 'function', 'goto', 'if', 'import', 'new', 'prototype', 'return', 'switch', 'throw', 'try',
			'var', 'while'
		};
		words (NUM) = {
			'NaN', 'infinity', 'undefined', 'null'
		};
	};
	rule	<[$(a)$(d)_]+\:>	{ 
		state = default; color = NUM;
	};
	
	rule 	<...> { color = KEYWORD; };
};

state newline {;
	rule	<\#>	 {state=pre;	color=PRE; };
	rule 	<[^$(s)]> { state=default; };
};
	
state comment_1	{
	color=COMMENT;
	rule	<\*/>	{ state=default; };
};
	
state comment_2	{
	color=COMMENT;
	rule	<\\\n>;
	rule	<\n>	{state=newline;};
};
	
state pre {
	color = PRE;
	rule	</\*>	{ state=comment_1; color=COMMENT; };
	rule	<//>	{ state=comment_2; color=COMMENT; };
	rule	<\\\n>;
	rule	<\n>	{state=newline; };
};
	
state string {
	color = STRING;
	rule	<\\\\>;
	rule	<\\\">;
	rule	<\">	{state=default;};
};

state string2 {
	color = STRING;
	rule	<\\\\>;
	rule	<\\\'>;
	rule	<\'>	{state=default;};
};

state fstring {
	color = STRING;
	rule	<\\\\>;
	rule	<\\\`>;
	rule	<\`>	{state=default;};

	rule	<\$\{> { state=field; color=STRING; };

};

state field {
	color = STRING;
	rule	<\{>;

	rule	<}> { state=fstring; color=STRING; };

};
